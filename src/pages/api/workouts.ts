import { NextApiRequest, NextApiResponse } from "next";
import { getSession } from "next-auth/react";
import prisma from "@/libs/prismadb";
import { Exercise, Workout } from "@prisma/client";

type CreateWorkoutRequestData = {
  exercises: {
    name: string;
    repCount: number;
    weightCount: number;
    setCount: number;
  }[];
};

let workoutData: Workout;
let workoutExercises: Exercise[];

export default async function createWorkout(
  req: NextApiRequest,
  res: NextApiResponse
): Promise<void> {
  try {
    // Authenticate the request
    const session = await getSession({ req });

    // Check if the user is authenticated
    if (!session?.user) {
      // Redirect the user to the login page
      res.redirect("/login");
      return;
    }

    // Extract the workout data from the request body
    const { exercises } = req.body as CreateWorkoutRequestData;

    // Check if the email address already exists in the database
    const users = await prisma.user.findMany({
      where: {
        email: session.user.email,
      },
    });

    if (users.length === 0) {
      // The email address does not exist in the database.
      // You can create the new user.

      // Create a new user object
      const user = await prisma.user.create({
        data: {
          name: session.user.name,
          email: session.user.email,
        },
      });

      // Create a new workout object
      workoutData = {
        id: "", // Placeholder value, the actual ID will be generated by the database
        userId: user.id,
        date: new Date(),
      };

      // Create the exercises for the workout
      workoutExercises = exercises.map((exercise) => ({
        id: "", // Placeholder value, the actual ID will be generated by the database
        workoutId: "", // Placeholder value, will be set when the workout is created
        name: exercise.name,
        repCount: exercise.repCount || null,
        weightCount: exercise.weightCount || null,
        setCount: exercise.setCount || null,
        userEmail: session?.user?.email ?? "",
      }));

      // Save the workout and exercises to the database
      await prisma.workout.create({
        data: {
          ...workoutData,
          exercises: {
            create: workoutExercises,
          },
        },
      });

      // Return the saved workout to the frontend
      res.status(200).json(workoutData);
    } else {
      // The email address already exists in the database.
      // You can save the workout to MongoDB.
      await prisma.workout.create({
        data: {
          ...workoutData,
          exercises: {
            create: workoutExercises,
          },
        },
      });

      res.status(200).json({
        message: "Workout saved successfully",
      });
    }
  } catch (error: any) {
    console.error("Error saving workout:", error);
    res.status(500).json({ error: "Internal server error" });
  }
}
